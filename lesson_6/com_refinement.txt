a) We actually have the offense and defense steps backwards. In other words, if the computer has a chance to win, it should take that move rather than defend. As we have coded it now, it will defend first. Update the code so that it plays the offensive move first.

b) We can make one more improvement: pick square #5 if it's available. The AI for the computer should go like this: first, pick the winning move; then, defend; then pick square #5; then pick a random square.

c) Can you change the game so that the computer moves first? Can you make this a setting at the top (i.e. a constant), so that you could play the game with either player or computer going first? Can you make it so that if the constant is set to "choose", then your game will prompt the user to determine who goes first? Valid options for the constant can be "player", "computer", or "choose"

If comp has two markers and player has two makers, place piece on the comp makers
If the computer has two makers and player has one makers -> place at the same line
If the computer has two makers and player has two makers -> place at the same line
If the computer has one makers and two empty squares and player has two markers and one empty square -> place at the player line

Pick the 5th square if it is available
Priorities:
- Pick the thrid same makers on the rows
- Pick the 5th square
- Pick a random move

Computer move first
Use constant variables
If constant is choose, user will choose who go first
If constant is player, player will go first
If constant is computer, computer will go first


---------------------------------------------------------------------
backup:

if brd[5] == INITIAL_MARKER
    square = 5
  else
    square = empty_square(brd).sample
  end
  WINNING_LINES.each do |line|
    empty_square_on_line = line.select { |num| brd[num] == INITIAL_MARKER }.join.to_i
    pieces_on_winning_line = brd.values_at(line[0], line[1], line[2])
    if pieces_on_winning_line.any? { |num| num == INITIAL_MARKER } == true
      if pieces_on_winning_line.count(COMPUTER_MARKER) == 2
        square = empty_square_on_line
      elsif pieces_on_winning_line.count(PLAYER_MARKER) == 2 && 
            WINNING_LINES.all? { |line| brd.values_at(line[0], line[1], line[2]).count(COMPUTER_MARKER) < 2 }
        square = empty_square_on_line
        binding.pry
      end
    end
  end
  brd[square] = COMPUTER_MARKER